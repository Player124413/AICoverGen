import json
import os
import shutil
import urllib.request
import zipfile
from argparse import ArgumentParser

import gradio as gr

from main import song_cover_pipeline

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

mdxnet_models_dir = os.path.join(BASE_DIR, 'mdxnet_models')
rvc_models_dir = os.path.join(BASE_DIR, 'rvc_models')
output_dir = os.path.join(BASE_DIR, 'song_output')


def get_current_models(models_dir):
    models_list = os.listdir(models_dir)
    items_to_remove = ['hubert_base.pt', 'MODELS.txt', 'public_models.json', 'rmvpe.pt']
    return [item for item in models_list if item not in items_to_remove]


def update_models_list():
    models_l = get_current_models(rvc_models_dir)
    return gr.Dropdown.update(choices=models_l)


def load_public_models():
    models_table = []
    for model in public_models['voice_models']:
        if not model['name'] in voice_models:
            model = [model['name'], model['description'], model['credit'], model['url'], ', '.join(model['tags'])]
            models_table.append(model)

    tags = list(public_models['tags'].keys())
    return gr.DataFrame.update(value=models_table), gr.CheckboxGroup.update(choices=tags)


def extract_zip(extraction_folder, zip_name):
    os.makedirs(extraction_folder)
    with zipfile.ZipFile(zip_name, 'r') as zip_ref:
        zip_ref.extractall(extraction_folder)
    os.remove(zip_name)

    index_filepath, model_filepath = None, None
    for root, dirs, files in os.walk(extraction_folder):
        for name in files:
            if name.endswith('.index') and os.stat(os.path.join(root, name)).st_size > 1024 * 100:
                index_filepath = os.path.join(root, name)

            if name.endswith('.pth') and os.stat(os.path.join(root, name)).st_size > 1024 * 1024 * 40:
                model_filepath = os.path.join(root, name)

    if not model_filepath:
        raise gr.Error(f'–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª .pth –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ {extraction_folder}.')

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ñ–∞–π–ª –∏–Ω–¥–µ–∫—Å–∞ –≤ –ø–∞–ø–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    os.rename(model_filepath, os.path.join(extraction_folder, os.path.basename(model_filepath)))
    if index_filepath:
        os.rename(index_filepath, os.path.join(extraction_folder, os.path.basename(index_filepath)))

    # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
    for filepath in os.listdir(extraction_folder):
        if os.path.isdir(os.path.join(extraction_folder, filepath)):
            shutil.rmtree(os.path.join(extraction_folder, filepath))


def download_online_model(url, dir_name, progress=gr.Progress()):
    try:
        progress(0, desc=f'[~] –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –∏–º–µ–Ω–µ–º {dir_name}...')
        zip_name = url.split('/')[-1]
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏.')

        if 'pixeldrain.com' in url:
            url = f'https://pixeldrain.com/api/file/{zip_name}'

        urllib.request.urlretrieve(url, zip_name)

        progress(0.5, desc='[~] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] –ì–æ–ª–æ—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å {dir_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))


def upload_local_model(zip_path, dir_name, progress=gr.Progress()):
    try:
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏.')

        zip_name = zip_path.name
        progress(0.5, desc='[~] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] –ì–æ–ª–æ—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å {dir_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))


def filter_models(tags, query):
    models_table = []

    # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if len(tags) == 0 and len(query) == 0:
        for model in public_models['voice_models']:
            models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º –∏ –∑–∞–ø—Ä–æ—Å—É
    elif len(tags) > 0 and len(query) > 0:
        for model in public_models['voice_models']:
            if all(tag in model['tags'] for tag in tags):
                model_attributes = f"{model['name']} {model['description']} {model['credit']} {' '.join(model['tags'])}".lower()
                if query.lower() in model_attributes:
                    models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–≥–∞–º
    elif len(tags) > 0:
        for model in public_models['voice_models']:
            if all(tag in model['tags'] for tag in tags):
                models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    else:
        for model in public_models['voice_models']:
            model_attributes = f"{model['name']} {model['description']} {model['credit']} {' '.join(model['tags'])}".lower()
            if query.lower() in model_attributes:
                models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    return gr.DataFrame.update(value=models_table)


def pub_dl_autofill(pub_models, event: gr.SelectData):
    return gr.Text.update(value=pub_models.loc[event.index[0], 'URL']), gr.Text.update(value=pub_models.loc[event.index[0], 'Model Name'])


def swap_visibility():
    return gr.update(visible=True), gr.update(visible=False), gr.update(value=''), gr.update(value=None)


def process_file_upload(file):
    return file.name, gr.update(value=file.name)


def show_hop_slider(pitch_detection_algo):
    if pitch_detection_algo == 'mangio-crepe':
        return gr.update(visible=True)
    else:
        return gr.update(visible=False)

if __name__ == '__main__':
    parser = ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ—Å–Ω–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ song_output/id.', add_help=True)
    parser.add_argument("--share", action="store_true", dest="share_enabled", default=False, help="–í–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±–º–µ–Ω–∞")
    parser.add_argument("--listen", action="store_true", default=False, help="–î–µ–ª–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑ –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.")
    parser.add_argument('--listen-host', type=str, help='–ò–º—è —Ö–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º.')
    parser.add_argument('--listen-port', type=int, help='–ü–æ—Ä—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º.')
    args = parser.parse_args()

    # –î–æ–±–∞–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä use_gpu=False, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU
    web_app = gr.Interface(fn=song_cover_pipeline, inputs="audio", outputs="audio", use_gpu=False)

    voice_models = get_current_models(rvc_models_dir)
    with open(os.path.join(rvc_models_dir, 'public_models.json'), encoding='utf8') as infile:
        public_models = json.load(infile)

    with gr.Blocks(title='AICoverGenWebUI', theme='NoCrypt/miku'): as app:

        gr.Label('AISINGERS üê≥ | https://t.me/aisingers', show_label=False)

        # –ì–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        with gr.Tab("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):

            with gr.Accordion('–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'):
                with gr.Row():
                    with gr.Column():
                        rvc_model = gr.Dropdown(voice_models, label='–ì–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏', info='–ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π "AICoverGen --> rvc_models". –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —ç—Ç—É –ø–∞–ø–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
                        ref_btn = gr.Button('–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏ üîÅ', variant='primary')

                    with gr.Column() as yt_link_col:
                        song_input = gr.Text(label='–í—Ö–æ–¥–Ω–æ–π —Ç—Ä–µ–∫', info='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é –Ω–∞ YouTube –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
                        show_file_upload_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')

                    with gr.Column(visible=False) as file_upload_col:
                        local_file = gr.File(label='–ê—É–¥–∏–æ —Ñ–∞–π–ª')
                        song_input_file = gr.UploadButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å üìÇ', file_types=['audio'], variant='primary')
                        show_yt_link_button = gr.Button('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É YouTube/–ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É')
                        song_input_file.upload(process_file_upload, inputs=[song_input_file], outputs=[local_file, song_input])

                    with gr.Column():
                        pitch = gr.Slider(-3, 3, value=0, step=1, label='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–æ–∫–∞–ª)', info='–û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1 –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –∫ –∂–µ–Ω—Å–∫–æ–º—É –≤–æ–∫–∞–ª—É –∏ -1 –Ω–∞–æ–±–æ—Ä–æ—Ç. (–û–∫—Ç–∞–≤—ã)')
                        pitch_all = gr.Slider(-12, 12, value=0, step=1, label='–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞', info='–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã—Å–æ—Ç—É —Ç–æ–Ω–∞/–∫–ª—é—á –≤–æ–∫–∞–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º—É–∑—ã–∫–∏. –ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç —É—Ö—É–¥—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞. (–ü–æ–ª—É—Ç–æ–Ω–æ–≤)')
                    show_file_upload_button.click(swap_visibility, outputs=[file_upload_col, yt_link_col, song_input, local_file])
                    show_yt_link_button.click(swap_visibility, outputs=[yt_link_col, file_upload_col, song_input, local_file])

            with gr.Accordion('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏', open=False):
                with gr.Row():
                    index_rate = gr.Slider(0, 1, value=0.5, label='–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞', info="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∞–∫—Ü–µ–Ω—Ç–∞ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –≥–æ–ª–æ—Å–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞")
                    filter_radius = gr.Slider(0, 7, value=3, step=1, label='–†–∞–¥–∏—É—Å —Ñ–∏–ª—å—Ç—Ä–∞', info='–ï—Å–ª–∏ >=3: –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞. –ú–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º–Ω–æ—Å—Ç—å')
                    rms_mix_rate = gr.Slider(0, 1, value=0.25, label='–°–∫–æ—Ä–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞–Ω–∏—è RMS', info="–£–ø—Ä–∞–≤–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–æ–∫–∞–ª–∞ (0) –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å (1)")
                    protect = gr.Slider(0, 0.5, value=0.33, label='–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã', info='–ó–∞—â–∏—â–∞–µ—Ç –±–µ–∑–∑–≤—É—á–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –∏ –∑–≤—É–∫–∏ –¥—ã—Ö–∞–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0,5, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å.')
                    with gr.Column():
                        f0_method = gr.Dropdown(['rmvpe', 'mangio-crepe'], value='rmvpe', label='–ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞', info='–õ—É—á—à–∏–π –≤—ã–±–æ—Ä - rmvpe (—á–µ—Ç–∫–æ—Å—Ç—å –≤ –≤–æ–∫–∞–ª–µ), –∑–∞—Ç–µ–º mangio-crepe (–±–æ–ª–µ–µ –≥–ª–∞–¥–∫–∏–π –≤–æ–∫–∞–ª)')
                        crepe_hop_length = gr.Slider(32, 320, value=128, step=1, visible=False, label='–î–ª–∏–Ω–∞ —à–∞–≥–∞ Crepe', info='–ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º –∏ –±–æ–ª—å—à–µ–º—É —Ä–∏—Å–∫—É –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≥–æ–ª–æ—Å–∞, –Ω–æ –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞.')
                        f0_method.change(show_hop_slider, inputs=f0_method, outputs=crepe_hop_length)
                keep_files = gr.Checkbox(label='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã', info='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ song_output/id, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∫–∞–ª/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º, —á—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –º–µ—Å—Ç–æ')

            with gr.Accordion('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è', open=False):
                gr.Markdown('### –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–¥–ë)')
                with gr.Row():
                    main_gain = gr.Slider(-20, 20, value=0, step=1, label='–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–∫–∞–ª')
                    backup_gain = gr.Slider(-20, 20, value=0, step=1, label='–í–æ–∫–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
                    inst_gain = gr.Slider(-20, 20, value=0, step=1, label='–ú—É–∑—ã–∫–∞')

                gr.Markdown('### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π –Ω–∞ –≥–æ–ª–æ—Å–µ AI')
                with gr.Row():
                    reverb_rm_size = gr.Slider(0, 1, value=0.15, label='–†–∞–∑–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã', info='–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–Ω–∞—Ç–∞, —Ç–µ–º –¥–æ–ª—å—à–µ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—è')
                    reverb_wet = gr.Slider(0, 1, value=0.2, label='–£—Ä–æ–≤–µ–Ω—å Wet', info='–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –≥–æ–ª–æ—Å–∞ AI —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π')
                    reverb_dry = gr.Slider(0, 1, value=0.8, label='–£—Ä–æ–≤–µ–Ω—å Dry', info='–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –≥–æ–ª–æ—Å–∞ AI –±–µ–∑ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')
                    reverb_damping = gr.Slider(0, 1, value=0.7, label='–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è', info='–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –≤ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')

                gr.Markdown('### –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ–≤—ã—Ö–æ–¥–∞')
                output_format = gr.Dropdown(['mp3', 'wav'], value='mp3', label='–¢–∏–ø –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞', info='mp3: –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –Ω–µ–ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. wav: –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ')

            with gr.Row():
                clear_btn = gr.ClearButton(value='–û—á–∏—Å—Ç–∏—Ç—å', components=[song_input, rvc_model, keep_files, local_file])
                generate_btn = gr.Button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", variant='primary')
                ai_cover = gr.Audio(label='AI Cover', show_share_button=False)

            ref_btn.click(update_models_list, None, outputs=rvc_model)
            is_webui = gr.Number(value=1, visible=False)
            generate_btn.click(song_cover_pipeline,
                               inputs=[song_input, rvc_model, pitch, keep_files, is_webui, main_gain, backup_gain,
                                       inst_gain, index_rate, filter_radius, rms_mix_rate, f0_method, crepe_hop_length,
                                       protect, pitch_all, reverb_rm_size, reverb_wet, reverb_dry, reverb_damping,
                                       output_format],
                               outputs=[ai_cover])
            clear_btn.click(lambda: [0, 0, 0, 0, 0.5, 3, 0.25, 0.33, 'rmvpe', 128, 0, 0.15, 0.2, 0.8, 0.7, 'mp3', None],
                            outputs=[pitch, main_gain, backup_gain, inst_gain, index_rate, filter_radius, rms_mix_rate,
                                     protect, f0_method, crepe_hop_length, pitch_all, reverb_rm_size, reverb_wet,
                                     reverb_dry, reverb_damping, output_format, ai_cover])

        # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        with gr.Tab('–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å'):

            with gr.Tab('–ü–æ URL HuggingFace/Pixeldrain'):
                with gr.Row():
                    model_zip_link = gr.Text(label='–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏', info='–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª zip, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ .pth –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª .index.')
                    model_name = gr.Text(label='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏', info='–î–∞–π—Ç–µ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –æ—Ç –¥—Ä—É–≥–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.')

                with gr.Row():
                    download_btn = gr.Button('–°–∫–∞—á–∞—Ç—å üåê', variant='primary', scale=19)
                    dl_output_message = gr.Text(label='–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏', interactive=False, scale=20)

                download_btn.click(download_online_model, inputs=[model_zip_link, model_name], outputs=dl_output_message)

                gr.Markdown('## –ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞')
                gr.Examples(
                    [
                        ['https://huggingface.co/phant0m4r/LiSA/resolve/main/LiSA.zip', '–õ–∏–∑–∞'],
                        ['https://pixeldrain.com/u/3tJmABXA', '–ì—É—Ä–∞'],
                        ['https://huggingface.co/Kit-Lemonfoot/kitlemonfoot_rvc_models/resolve/main/AZKi%20(Hybrid).zip', '–ê—Ü–∫–∏']
                    ],
                    [model_zip_link, model_name],
                    [],
                    download_online_model,
                )

            with gr.Tab('–ò–∑ –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞'):

                gr.Markdown('## –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å')
                gr.Markdown('- –ù–∞–∂–º–∏—Ç–µ "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"')
                gr.Markdown('- –§–∏–ª—å—Ç—Ä—É–π—Ç–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ç–µ–≥–∞–º –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ')
                gr.Markdown('- –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏')
                gr.Markdown('- –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å"')

                with gr.Row():
                    pub_zip_link = gr.Text(label='–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏')
                    pub_model_name = gr.Text(label='–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')

                with gr.Row():
                    download_pub_btn = gr.Button('–°–∫–∞—á–∞—Ç—å üåê', variant='primary', scale=19)
                    pub_dl_output_message = gr.Text(label='–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏', interactive=False, scale=20)

                filter_tags = gr.CheckboxGroup(value=[], label='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–≥–∞–º–∏', choices=[])
                search_query = gr.Text(label='–ü–æ–∏—Å–∫')
                load_public_models_button = gr.Button(value='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π', variant='primary')

                public_models_table = gr.DataFrame(value=[], headers=['–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ä', 'URL', '–¢–µ–≥–∏'], label='–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏', interactive=False)
                public_models_table.select(pub_dl_autofill, inputs=[public_models_table], outputs=[pub_zip_link, pub_model_name])
                load_public_models_button.click(load_public_models, outputs=[public_models_table, filter_tags])
                search_query.change(filter_models, inputs=[filter_tags, search_query], outputs=public_models_table)
                filter_tags.change(filter_models, inputs=[filter_tags, search_query], outputs=public_models_table)
                download_pub_btn.click(download_online_model, inputs=[pub_zip_link, pub_model_name], outputs=pub_dl_output_message)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –º–æ–¥–µ–ª–∏
        with gr.Tab('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å'):
            with gr.Row():
                local_model_zip = gr.File(label='Zip-–∞—Ä—Ö–∏–≤ –º–æ–¥–µ–ª–∏', file_types=['zip'], info='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–µ–ª—å—é')
                local_model_name = gr.Text(label='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏', info='–î–∞–π—Ç–µ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –æ—Ç –¥—Ä—É–≥–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.')

            with gr.Row():
                upload_btn = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å üìÇ', variant='primary', scale=19)
                ul_output_message = gr.Text(label='–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏', interactive=False, scale=20)

            upload_btn.click(upload_local_model, inputs=[local_model_zip, local_model_name], outputs=ul_output_message)

        # –û –≤–∫–ª–∞–¥–∫–∞—Ö
        with gr.Tab('–û –ø—Ä–æ–µ–∫—Ç–µ'):

            with gr.Row():
                gr.Text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–∑–¥–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ AI –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º.", scale=10)
                gr.Text("–ú–æ—è —Ü–µ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ—Å–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è.", scale=10)
                gr.Text("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏–π –ø–µ—Å–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–±—Ä–∞–ª–∏.", scale=10)
                gr.Text("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º.", scale=10)

            with gr.Row():
                gr.Text("–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞, –∏ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é URL-—Å—Å—ã–ª–æ–∫.", scale=10)
                gr.Text("–Ø –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç, –∏ —è —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", scale=10)
                gr.Text("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ.", scale=10)

            with gr.Row():
                gr.Text("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –º–µ–Ω—è –Ω–∞ GitHub –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:", scale=10)
                gr.Link("https://github.com/Varaslav/AICoverGen", "GitHub –ø—Ä–æ–µ–∫—Ç–∞", scale=10)

            with gr.Row():
                gr.Text("–í—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –¥–ª—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –±–ª–∞–≥–æ–¥–∞—Ä—è —É—Å–∏–ª–∏—è–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–∞–º –ø—Ä–æ–µ–∫—Ç–∞.", scale=10)
                gr.Text("–ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –º–æ–¥–µ–ª—å –∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL-—Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–æ–¥–µ–ª—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º.", scale=10)

        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        with gr.Tab("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"):

            with gr.Row():
                gr.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", scale=10)

            with gr.Row():
                gr.Text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞) –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ config.py.", scale=10)

            with gr.Row():
                gr.Text("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞, –º–æ–≥—É—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", scale=10)

    # –ó–∞–ø—É—Å—Ç–∏–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if args.share_enabled:
        web_app.share()
    if args.listen:
        if args.listen_host is not None:
            host = args.listen_host
        else:
            host = "0.0.0.0"
        if args.listen_port is not None:
            port = args.listen_port
        else:
            port = 7860
        web_app.launch(share=False, host=host, port=port)
    else:
        web_app.launch(share=False)
